day = substr(input, 9, 10)
month = substr(input, 6, 7)
year = substr(input, 1, 4)
paste(year, month, day, sep = "-")
}
hmohiv$StartDate = convertDate(hmohiv$StartDate)
hmohiv$EndDate = convertDate(hmohiv$EndDate)
View(hmohiv)
as.Date(hmohiv$EndDate)
as.Date(hmohiv$EndDate) - as.Date(hmohiv$StartDate)
#Time to event calculation
hmohiv$Time = as.numeric(as.Date(hmohiv$EndDate) - as.Date(hmohiv$StartDate))
hmohiv$Time
hmohiv$Time * 12/365
hmohiv$Time = hmohiv$Time * 12/365
#Run survival analysis (Kaplan-Meier curve)
surv.fit = survfit(Surv(Time, Censor == 1) ~ Drug, data = hmohiv)
summary(surv.fit)
source('~/Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/lab1.R')
?Surv
plot(surv.fit)
plot(surv.fit, conf.int = T, col = c("red", "blue"))
plot(surv.fit, conf.int = T, col = c("red", "blue"))
#Compare curves with log-rank test
survdiff(Surv(Time, Censor == 1) ~ Drug, data = hmohiv)
#Log survival plot
plot(surv.fit, fun = "cumhaz")
#Log-log function (parallel = meets proportional hazards model)
plot(surv.fit, fun = "cloglog")
#Stratify by age group
hmohiv$ageGroup = cut(hmohiv$Age, breaks = c(0,30,35,40,45,60), labels = F, include.lowest = T)
#K-M Curves by age group (instead of drug status)
surv.fit2 = survfit(Surv(Time, Censor == 1) ~ ageGroup, data = hmohiv)
plot(surv.fit2)
### ASSIGNMENT ###
#Load data
hmohiv <- read_excel("Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/Lab1/hmohiv.xlsx")
#Convert dates into more suitable format
convertDate = function(input) {
day = substr(input, 1, 2)
month = substr(input, 3, 5)
month = match(month, month.abb)   #convert month name to number
year = substr(input, 6, 9)
paste(year, month, day, sep="-")
}
View(hmohiv)
#Convert dates into more suitable format
convertDate = function(input) {
day = substr(input, 1, 2)
month = substr(input, 3, 5)
month = match(month, month.abb)   #convert month name to number
year = substr(input, 6, 9)
paste(year, month, day, sep="-")
}
hmohiv$StartDate = convertDate(hmohiv$StartDate)
hmohiv$EndDate = convertDate(hmohiv$EndDate)
### ASSIGNMENT ###
#Load data
hmohiv <- read_excel("Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/Lab1/hmohiv.xlsx")
#If necessary, convert date into desired format
convertDate = function(input) {
day = substr(input, 9, 10)
month = substr(input, 6, 7)
year = substr(input, 1, 4)
paste(year, month, day, sep = "-")
}
hmohiv$StartDate = convertDate(hmohiv$StartDate)
hmohiv$EndDate = convertDate(hmohiv$EndDate)
#Time to event calculation (and convert from days to months)
hmohiv$Time = as.numeric(as.Date(hmohiv$EndDate) - as.Date(hmohiv$StartDate))
hmohiv$Time = hmohiv$Time * 12/365
#Examine date distn
hist(hmohiv$Time)
library(readxl)
library(survival)
#Load data
melanoma <- read_excel("Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/HW1/Melanoma.xlsx")
View(melanoma)
#Collapse status into 1 = death of any kind, 0 = alive
melanoma$status = (melanoma$status != 2) - 0
#Convert time from days into years
melanoma$time = melanoma$time / 365
#Q1: Calculate the incidence rate for death in the sample overall.
sum(melanoma$time)
#Q1: Calculate the incidence rate for death in the sample overall.
sum(melanoma$status) / sum(melanoma$time)
#Q1: Calculate the incidence rate for death in the sample overall.
sum(melanoma$status) / sum(melanoma$time) * 100
melanoma[ulceration]
melanoma[melanoma$ulcer]
View(melanoma[melanoma$ulcer])
View(melanoma[melanoma$ulcer,])
View(melanoma[!melanoma$ulcer,])
melanoma[melanoma$ulcer,]$status
View(melanoma[melanoma$ulcer,])
View(melanoma[!melanoma$ulcer,])
#Q2: Calculate rate ratio for death comparing those with ulceration to those without ulceration.
#Ans:
with_ulcer = sum(melanoma[melanoma$ulcer,]$status) / sum(melanoma[melanoma$ulcer,]$time) * 100
without_ulcer = sum(melanoma[!melanoma$ulcer,]$status) / sum(melanoma[!melanoma$ulcer,]$time) * 100
with_ulcer/without_ulcer
with_ulcer
without_ulcer
sum(melanoma[melanoma$ulcer,]$time)
View(melanoma[melanoma$ulcer,])
#Q2: Calculate rate ratio for death comparing those with ulceration to those without ulceration.
#Ans:
ulcer_ind = which(melanoma$ulcer == 1)
melanoma[ulcer_ind,]
melanoma[!ulcer_ind,]
melanoma[-ulcer_ind,]
#Q2: Calculate rate ratio for death comparing those with ulceration to those without ulceration.
#Ans:
ulcer_ind = which(melanoma$ulcer == 1)
with_ulcer = sum(melanoma[ulcer_ind,]$status) / sum(melanoma[ulcer_ind,]$time) * 100
without_ulcer = sum(melanoma[-ulcer_ind,]$status) / sum(melanoma[-ulcer_ind,]$time) * 100
with_ulcer/without_ulcer
#Q3: Now plot the Kaplan-Meier curves for the ulcer group versus the non-ulcer group.
#    What is the median survival time for the ulcer group in years?
#Ans:
surv.fit.ulcer = survfit(Surv(time, status == 1) ~ ulcer, data = melanoma)
summary(surv.fit.ulcer)
plot(surv.fit.ulcer)
#Q4: What is the p-value for the log-rank test comparing the ulcer group to the non-ulcer group?
#Ans:
survdiff(Surv(time, status == 1) ~ ulcer, data = melanoma)
#Q5: What is the probability of surviving past 10 years in the non-ulcer group?
#Ans:
summary(surv.fit.ulcer)
plot(surv.fit.ulcer, col = c("red", "blue"))
hist(melanoma$age)
length(melanoma$age)
length(melanoma$age)/3
floor(length(melanoma$age)/3)
sort(melanoma$age)
#Q6: Now plot Kaplan-Meier curves according to tertiles of age. Just by looking at the plot, which group has the worst survival?
#Ans:
#Find tertiles
tert_ind = floor(length(melanoma$age)/3)
sort(melanoma$age)[tert_ind]
sort(melanoma$age)[tert_ind*2]
melanoma$ageGroup = cut(melanoma$age, breaks = c(0,first_tertile,second_tertile), labels = F, include.lowest = T)
#Q6: Now plot Kaplan-Meier curves according to tertiles of age. Just by looking at the plot, which group has the worst survival?
#Ans:
tert_ind = floor(length(melanoma$age)/3)
first_tertile = sort(melanoma$age)[tert_ind]
second_tertile = sort(melanoma$age)[tert_ind*2]
melanoma$ageGroup = cut(melanoma$age, breaks = c(0,first_tertile,second_tertile), labels = F, include.lowest = T)
sort(melanoma$age)[-1]
third_tertile = sort(melanoma$age)[nrow(melanoma)]
melanoma$ageGroup = cut(melanoma$age, breaks = c(0,first_tertile,second_tertile,third_tertile), labels = F, include.lowest = T)
surv.fit.age = survfit(Surv(time, status == 1) ~ ageGroup, data = melanoma)
plot(surv.fit.age, col = c("red", "green", "blue"))
#Q7: What is the p-value for the log-rank test when comparing tertiles of age?
survdiff(Surv(time, status == 1) ~ ageGroup, data = melanoma)
#Q8: TRUE or FALSE. The thickness of the tumors roughly follows a normal distribution.
#Ans:
hist(melanoma$thickness)
#Q9: Plot the Kaplan-Meier curves for tumors less than 2 mm thick versus tumors â‰¥2 mm thick. What is the Chi-square value for the log-rank test?
melanoma$thickness = (melanoma$thickness >= 2) - 0
survdiff(Surv(time, status == 1) ~ thickness, data = melanoma)
#Q10: What is the overall sample size (how many people are at risk) at exactly 10 years into the study?
sum(melanoma$time >= 10)
#Q11: Plot Kaplan-Meier curves stratified on two attributes: tumor thickness less than 2mm vs. greater than 2 mm thick AND ulcer vs. non-ulcer.
#     Which of the following is true?
#Ans:
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
summary(surv.fit.ulcerandthickness)
plot(surv.fit.ulcerandthickness)
plot(surv.fit.ulcerandthickness, col = c("red", "orange", "green", "blue"))
plot(surv.fit.ulcerandthickness, col = c("red", "orange", "green", "blue"), label.curves = T)
survplot(surv.fit.ulcerandthickness, col = c("red", "orange", "green", "blue"), label.curves = T)
install.packages(rms)
install.packages("rms")
library(rms)
survplot(surv.fit.ulcerandthickness, conf = "none")
#Q11: Plot Kaplan-Meier curves stratified on two attributes: tumor thickness less than 2mm vs. greater than 2 mm thick AND ulcer vs. non-ulcer.
#     Which of the following is true?
#Ans:
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
surv.fit.ulcerandthickness
survplot(surv.fit.ulcerandthickness, conf = "none")
class(surv.fit.ulcerandthickness) <- c(class(surv.fit.ulcerandthickness), "npsurv")
survplot(surv.fit.ulcerandthickness, conf = "none")
plot(surv.fit.ulcerandthickness, col = c("red", "orange", "green", "blue"))
survdiff(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
?rexp
exp(-4)
exp(-0.5*1)
1-exp(-0.5*1)
1-exp(-0.05*12)
plot(surv.fit.age, col = c("red", "green", "blue"))
#Q7: What is the p-value for the log-rank test when comparing tertiles of age?
#Ans: .01
survdiff(Surv(time, status == 1) ~ ageGroup, data = melanoma)
#Q8: TRUE or FALSE. The thickness of the tumors roughly follows a normal distribution.
#Ans: FALSE
hist(melanoma$thickness)
melanoma$time
#CHECK
#Q3: Now plot the Kaplan-Meier curves for the ulcer group versus the non-ulcer group.
#    What is the median survival time for the ulcer group in years?
#Ans:  5.8
surv.fit.ulcer = survfit(Surv(time, status == 1) ~ ulcer, data = melanoma)
summary(surv.fit.ulcer)
plot(surv.fit.ulcer, col = c("red", "blue"))
# Variables:
# Time: time to censoring or death in days
# Status: 1 died from melanoma, 2 alive, 3 dead from other causes.
# Sex: 1 = male, 0 = female.
# Age: age in years.
# Year: year of operation.
# Thickness: tumor thickness in mm.
# Ulcer: 1 = presence, 0 = absence.
melanoma <- read_excel("Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/HW1/Melanoma.xlsx")
#Collapse status into 1 = death of any kind, 0 = alive
melanoma$status = (melanoma$status != 2) - 0
#Convert time from days into years
melanoma$time = melanoma$time / 365
#Q1: Calculate the incidence rate for death in the sample overall.
#Ans: 5.9
sum(melanoma$status) / sum(melanoma$time) * 100
#Q2: Calculate rate ratio for death comparing those with ulceration to those without ulceration.
#Ans: 3.54
ulcer_ind = which(melanoma$ulcer == 1)
with_ulcer = sum(melanoma[ulcer_ind,]$status) / sum(melanoma[ulcer_ind,]$time) * 100
without_ulcer = sum(melanoma[-ulcer_ind,]$status) / sum(melanoma[-ulcer_ind,]$time) * 100
with_ulcer/without_ulcer
#CHECK
#Q3: Now plot the Kaplan-Meier curves for the ulcer group versus the non-ulcer group.
#    What is the median survival time for the ulcer group in years?
#Ans:  6.2
surv.fit.ulcer = survfit(Surv(time, status == 1) ~ ulcer, data = melanoma)
summary(surv.fit.ulcer)
library(readxl)
library(survival)
#Load data
# Variables:
# Time: time to censoring or death in days
# Status: 1 died from melanoma, 2 alive, 3 dead from other causes.
# Sex: 1 = male, 0 = female.
# Age: age in years.
# Year: year of operation.
# Thickness: tumor thickness in mm.
# Ulcer: 1 = presence, 0 = absence.
melanoma <- read_excel("Documents/School/Grad/Q3/Stats262/Unit1_KaplanMeierCurves/HW1/Melanoma.xlsx")
#Collapse status into 1 = death of any kind, 0 = alive
melanoma$status = (melanoma$status != 2) - 0
#Convert time from days into years
melanoma$time = melanoma$time / 365
#Q1: Calculate the incidence rate for death in the sample overall.
#Ans: 5.9
sum(melanoma$status) / sum(melanoma$time) * 100
#Q2: Calculate rate ratio for death comparing those with ulceration to those without ulceration.
#Ans: 3.54
ulcer_ind = which(melanoma$ulcer == 1)
with_ulcer = sum(melanoma[ulcer_ind,]$status) / sum(melanoma[ulcer_ind,]$time) * 100
without_ulcer = sum(melanoma[-ulcer_ind,]$status) / sum(melanoma[-ulcer_ind,]$time) * 100
with_ulcer/without_ulcer
#Q3: Now plot the Kaplan-Meier curves for the ulcer group versus the non-ulcer group.
#    What is the median survival time for the ulcer group in years?
#Ans: 6.2
surv.fit.ulcer = survfit(Surv(time, status == 1) ~ ulcer, data = melanoma)
summary(surv.fit.ulcer)
plot(surv.fit.ulcer, col = c("red", "blue"))
#Q4: What is the p-value for the log-rank test comparing the ulcer group to the non-ulcer group?
#Ans: p= 1e-07 (Less than .0001)
survdiff(Surv(time, status == 1) ~ ulcer, data = melanoma)
#Q5: What is the probability of surviving past 10 years in the non-ulcer group?
#Ans: 68.9
summary(surv.fit.ulcer)
#Q6: Now plot Kaplan-Meier curves according to tertiles of age. Just by looking at the plot, which group has the worst survival?
#Ans: The oldest tertile.
tert_ind = floor(length(melanoma$age)/3)
first_tertile = sort(melanoma$age)[tert_ind]
second_tertile = sort(melanoma$age)[tert_ind*2]
third_tertile = sort(melanoma$age)[nrow(melanoma)]
melanoma$ageGroup = cut(melanoma$age, breaks = c(0,first_tertile,second_tertile,third_tertile), labels = F, include.lowest = T)
surv.fit.age = survfit(Surv(time, status == 1) ~ ageGroup, data = melanoma)
plot(surv.fit.age, col = c("red", "green", "blue"))
#Q7: What is the p-value for the log-rank test when comparing tertiles of age?
#Ans: .01
survdiff(Surv(time, status == 1) ~ ageGroup, data = melanoma)
#Q8: TRUE or FALSE. The thickness of the tumors roughly follows a normal distribution.
#Ans: FALSE
hist(melanoma$thickness)
#Q9: Plot the Kaplan-Meier curves for tumors less than 2 mm thick versus tumors â‰¥2 mm thick. What is the Chi-square value for the log-rank test?
#Ans: 27.6
melanoma$thickness = (melanoma$thickness >= 2) - 0
survdiff(Surv(time, status == 1) ~ thickness, data = melanoma)
#Q10: What is the overall sample size (how many people are at risk) at exactly 10 years into the study?
#Ans: 23
sum(melanoma$time >= 10)
#Q11: Plot Kaplan-Meier curves stratified on two attributes: tumor thickness less than 2mm vs. greater than 2 mm thick AND ulcer vs. non-ulcer.
#     Which of the following is true?
#Ans: The group with tumor less than 2mm thick and ulcer has a similar survival curve to the group with tumor greater than 2mm and no ulcer.
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
summary(surv.fit.ulcerandthickness)
plot(surv.fit.ulcerandthickness, col = c("red", "orange", "green", "blue"))
survdiff(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
###
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma, conf.type = "log-log")
library(rms)
survplot(surv.fit.ulcerandthickness)
### Trying to label KM Curves
library(rms)
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
survplot(surv.fit.ulcerandthickness)
### Trying to label KM Curves
library(rms)
surv.fit.ulcerandthickness = survfit(Surv(time, status == 1) ~ thickness + ulcer, data = melanoma)
survplot(surv.fit.ulcerandthickness)
load(tidyverse)
library(tidyverse)
#Load data
confirmed = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
recovered = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
deaths = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
View(confirmed)
#Load data
confirmed = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", sep = ",")
recovered = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv", sep = ",")
deaths = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = ",")
View(confirmed)
View(deaths)
View(recovered)
#Subset for China
confirmed_china = confirmed %>% filter(Country.Region == "China")
recovered_china = recovered %>% filter(Country.Region == "China")
deaths_china = deaths %>% filter(Country.Region == "China")
View(confirmed_china)
#Subset for China
confirmed_china = confirmed %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
View(confirmed_china)
recovered_china = recovered %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
deaths_china = deaths %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
?collect
confirmed_china = confirmed_china %>% gather(key = "date", value = "count", 3:96)
View(confirmed_china)
rownames(confirmed)
colnames(confirmed)
View(deaths[,80:98])
deaths[232,1]
View(deaths_china[,80:98])
View(deaths_china[,80:96])
confirmed = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", sep = ",")
recovered = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv", sep = ",")
deaths = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = ",")
#Subset for China
confirmed_china = confirmed %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
recovered_china = recovered %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
deaths_china = deaths %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
confirmed_china = confirmed_china %>% gather(key = "date", value = "count", 3:96)
recovered_china = recovered_china %>% gather(key = "date", value = "count", 3:96)
deaths_china = deaths_china %>% gather(key = "date", value = "count", 3:96)
?substr
input = confirmed_china$date[1]
input
input = confirmed_china$date[1:5]
input
input = confirmed_china$date[c(1,40,55,89)]
input
input = confirmed_china$date[c(1,40,55,89, 156)]
input
input = confirmed_china$date[c(1,89,350)]
input
day = str_extract(input, pattern = 'X[[:digit:]].')
day
day = str_extract(input, pattern = 'X[[:digit:]].') %>% str_extract(pattern = '[[:digit:]]')
day
month = str_extract(input, pattern = '.[[:digit:]].') %>% str_extract(pattern = '[[:digit:]]')
month
day = str_extract(input, pattern = '.[[:digit:]].') %>% str_extract(pattern = '[[:digit:]]')
day
day = str_extract(input, pattern = '\.[[:digit:]]\.') %>% str_extract(pattern = '[[:digit:]]')
day = str_extract(input, pattern = '\\.[[:digit:]]*\\.') %>% str_extract(pattern = '[[:digit:]]')
day = str_extract(input, pattern = '\\.[[:digit:]]*\\.') %>% str_extract(pattern = '[[:digit:]]*')
day
month = str_extract(input, pattern = 'X[[:digit:]]\\.') %>% str_extract(pattern = '[[:digit:]]')
month
day = str_extract(input, pattern = '\\.[[:digit:]]\\.') %>% str_extract(pattern = '[[:digit:]]')
day
day = str_extract(input, pattern = '\\.[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
day
year = str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+')
year
as.Date("1-1-2020")
as.Date("20-1-1")
as.Date("2020-1-1")
as.Date
year
year = paste("20", str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+'))
year
year = paste("20", str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+'), sep = "")
year
day
month
year
paste(year, month, day, sep = "-")
input
as.Date(paste(year, month, day, sep = "-"))
confirmed_china$date = convertDate(confirmed_china$date)
recovered_china$date = convertDate(recovered_china$date)
deaths_china$date = convertDate(deaths_china$date)
#Convert dates into YYYY-MM-DD format
convertDate = function(input) {
day = str_extract(input, pattern = '\\.[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
month = str_extract(input, pattern = 'X[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
year = paste("20", str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+'), sep = "")
as.Date(paste(year, month, day, sep = "-"))
}
confirmed_china$date = convertDate(confirmed_china$date)
recovered_china$date = convertDate(recovered_china$date)
deaths_china$date = convertDate(deaths_china$date)
write.csv2(confirmed_china, file = "china_confirmed_cases.csv", sep = ",")
setwd("~/Documents/School/Grad/Q3/CS472/COVID19_projections/")
library(tidyverse)
setwd("~/Documents/School/Grad/Q3/CS472/COVID19_projections/")
#Load data
confirmed = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", sep = ",")
recovered = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv", sep = ",")
deaths = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = ",")
#Subset for China
confirmed_china = confirmed %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
recovered_china = recovered %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
deaths_china = deaths %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
confirmed_china = confirmed_china %>% gather(key = "date", value = "count", 3:96)
recovered_china = recovered_china %>% gather(key = "date", value = "count", 3:96)
deaths_china = deaths_china %>% gather(key = "date", value = "count", 3:96)
#Convert dates into YYYY-MM-DD format
convertDate = function(input) {
day = str_extract(input, pattern = '\\.[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
month = str_extract(input, pattern = 'X[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
year = paste("20", str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+'), sep = "")
as.Date(paste(year, month, day, sep = "-"))
}
confirmed_china$date = convertDate(confirmed_china$date)
recovered_china$date = convertDate(recovered_china$date)
deaths_china$date = convertDate(deaths_china$date)
write.csv2(confirmed_china, file = "china_confirmed_cases.csv", sep = ",")
write.csv2(confirmed_china, file = "china_confirmed_cases.csv")
write.csv(confirmed_china, file = "china_confirmed_cases.csv", sep = ",")
?write.csv
write.csv(confirmed_china, file = "china_confirmed_cases.csv", row.names = F)
write.csv(confirmed_china, file = "china_confirmed_cases_orig.csv", row.names = F)
setwd("~/Documents/School/Grad/Q3/CS472/COVID19_projections/Data/")
write.csv(confirmed_china, file = "china_confirmed_orig.csv", row.names = F)
write.csv(recovered_china, file = "china_recovered_orig.csv", row.names = F)
write.csv(deaths_china, file = "china_deaths_orig.csv", row.names = F)
write.csv(confirmed_china, file = "china_confirmed_byprovince_orig.csv", row.names = F)
write.csv(recovered_china, file = "china_recovered_byprovince_orig.csv", row.names = F)
write.csv(deaths_china, file = "china_deaths_byprovince_orig.csv", row.names = F)
#Group total counts by day
confirmed_china_ttl = confirmed_china %>% group_by(date) %>% summarise(count = sum(count))
recovered_china_ttl = recovered_china %>% group_by(date) %>% summarise(count = sum(count))
deaths_china_ttl = deaths_china %>% group_by(date) %>% summarise(count = sum(count))
View(deaths_china_ttl)
#Change variable names
names(confirmed_china)
#Change variable names
names(confirmed_china) = c("Province", "Country", "Date", "Count")
#Change variable names
names(confirmed_china) = c("Province", "Country", "Date", "Count")
names(recovered_china) = c("Province", "Country", "Date", "Count")
library(tidyverse)
setwd("~/Documents/School/Grad/Q3/CS472/COVID19_projections/Data/")
#Load data
confirmed = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", sep = ",")
recovered = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv", sep = ",")
deaths = read.csv2("~/Downloads/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", sep = ",")
#Subset for China
confirmed_china = confirmed %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
recovered_china = recovered %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
deaths_china = deaths %>% filter(Country.Region == "China") %>% select(-c("Lat", "Long"))
confirmed_china = confirmed_china %>% gather(key = "date", value = "count", 3:96)
recovered_china = recovered_china %>% gather(key = "date", value = "count", 3:96)
deaths_china = deaths_china %>% gather(key = "date", value = "count", 3:96)
#Convert dates into YYYY-MM-DD format
convertDate = function(input) {
day = str_extract(input, pattern = '\\.[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
month = str_extract(input, pattern = 'X[[:digit:]]+\\.') %>% str_extract(pattern = '[[:digit:]]+')
year = paste("20", str_extract(input, pattern = '\\.[[:digit:]]+$') %>% str_extract(pattern = '[[:digit:]]+'), sep = "")
as.Date(paste(year, month, day, sep = "-"))
}
confirmed_china$date = convertDate(confirmed_china$date)
recovered_china$date = convertDate(recovered_china$date)
deaths_china$date = convertDate(deaths_china$date)
#Change variable names
names(confirmed_china) = c("Province", "Country", "Date", "Count")
names(recovered_china) = c("Province", "Country", "Date", "Count")
names(deaths_china) = c("Province", "Country", "Date", "Count")
#Write output files
write.csv(confirmed_china, file = "china_confirmed_byprovince_orig.csv", row.names = F)
write.csv(recovered_china, file = "china_recovered_byprovince_orig.csv", row.names = F)
write.csv(deaths_china, file = "china_deaths_byprovince_orig.csv", row.names = F)
#Group total counts by day
confirmed_china_ttl = confirmed_china %>% group_by(Date) %>% summarise(Country = Country, Count = sum(Count))
recovered_china_ttl = recovered_china %>% group_by(Date) %>% summarise(Country = Country, Count = sum(Count))
deaths_china_ttl = deaths_china %>% group_by(Date) %>% summarise(Country = Country, Count = sum(Count))
#Group total counts by day
confirmed_china_ttl = confirmed_china %>% group_by(Date) %>% summarise(Country, Count = sum(Count))
#Group total counts by day
confirmed_china_ttl = confirmed_china %>% group_by(Date) %>% summarise(Country = Country[1], Count = sum(Count))
recovered_china_ttl = recovered_china %>% group_by(Date) %>% summarise(Country = Country[1], Count = sum(Count))
deaths_china_ttl = deaths_china %>% group_by(Date) %>% summarise(Country = Country[1], Count = sum(Count))
View(confirmed_china_ttl)
View(recovered_china_ttl)
View(deaths_china_ttl)
#Write output files
write.csv(confirmed_china, file = "china_confirmed_ttl_orig.csv", row.names = F)
write.csv(recovered_china, file = "china_recovered_ttl_orig.csv", row.names = F)
write.csv(deaths_china, file = "china_deaths_ttl_orig.csv", row.names = F)
